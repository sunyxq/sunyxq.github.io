(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{443:function(a,t,s){"use strict";s.r(t);var e=s(25),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"docker-入门"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-入门"}},[a._v("#")]),a._v(" Docker 入门")]),a._v(" "),s("p",[s("code",[a._v("Docker")]),a._v("是一个开源的应用容器引擎，可让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。\n容器是完全使用沙箱机制，相互之间不会有任何接口，更重要的是容器性能开销极低。")]),a._v(" "),s("p",[s("code",[a._v("Docker")]),a._v("主要有两种使用方法: GUI("),s("code",[a._v("Docker Desktop")]),a._v("）和 CLI。")]),a._v(" "),s("h2",{attrs:{id:"docker-安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-安装"}},[a._v("#")]),a._v(" Docker 安装")]),a._v(" "),s("ol",[s("li",[a._v("安装 Docker")])]),a._v(" "),s("p",[s("a",{attrs:{href:"https://www.docker.com/get-started",target:"_blank",rel:"noopener noreferrer"}},[a._v("官网"),s("OutboundLink")],1),a._v("直接下载"),s("code",[a._v("Docker Desktop")]),a._v("安装"),s("code",[a._v("docker")])]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("查看 Docker 信息")])]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("docker version\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 或")]),a._v("\ndocker info\n")])])]),s("p",[a._v("运行以上命令可验证 Docker 是否安装成功")]),a._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[a._v("启动 Docker")])]),a._v(" "),s("p",[a._v("Docker 是服务器----客户端架构。命令行运行"),s("code",[a._v("docker")]),a._v("命令的时候，需要本机有 Docker 服务。如果这项服务没有启动，可以用下面的命令启动。")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# service 命令的用法")]),a._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("service")]),a._v(" docker start\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# systemctl 命令的用法")]),a._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" systemctl start docker\n")])])]),s("p",[a._v("或直接启动"),s("code",[a._v("Docker Desktop")])]),a._v(" "),s("h2",{attrs:{id:"docker-常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-常用命令"}},[a._v("#")]),a._v(" Docker 常用命令")]),a._v(" "),s("ul",[s("li",[a._v("列出本机所有 image(镜像)")])]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("docker image "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 等同于")]),a._v("\ndocker images\n")])])]),s("p",[a._v("各选项说明：")]),a._v(" "),s("ul",[s("li",[a._v("REPOSITORY：表示镜像的仓库源")]),a._v(" "),s("li",[a._v("TAG：镜像的标签")]),a._v(" "),s("li",[a._v("IMAGE ID：镜像 ID")]),a._v(" "),s("li",[a._v("CREATED：镜像创建时间")]),a._v(" "),s("li",[a._v("SIZE：镜像大小\n同一仓库源可以有多个 TAG，代表这个仓库源的不同版本，使用 REPOSITORY:TAG 来定义不同的镜像。如果不指定一个镜像的版本标签，例如只使用 ubuntu，docker， 将默认使用 ubuntu:latest 镜像")])]),a._v(" "),s("p",[a._v("更多"),s("code",[a._v("image")]),a._v("操作方法详见"),s("code",[a._v("docker image --help")])]),a._v(" "),s("ul",[s("li",[a._v("查找镜像")])]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("docker search "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("image name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("ul",[s("li",[a._v("拉取镜像")])]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("docker pull ubuntu:15.10\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 等同于")]),a._v("\ndocker image pull ubuntu:15.10\n")])])]),s("ul",[s("li",[a._v("运行(新建)容器")])]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("docker run ubuntu:15.10 /bin/echo "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello Docker"')]),a._v("\n")])])]),s("p",[a._v("每运行一次，就会新建一个容器，同样的命令运行两次，就会生成两个一模一样的容器文件。")]),a._v(" "),s("p",[a._v("参数解析说明：")]),a._v(" "),s("ul",[s("li",[a._v("ubuntu:15.10：指定运行的镜像。Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。")]),a._v(" "),s("li",[a._v('/bin/echo "Hello Docker"：在启动的容器里执行命令\n以上命令功能：Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin/echo "Hello world"，然后输出结果。')])]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("docker run -i -t -d ubuntu:15.10 /bin/bash\n")])])]),s("p",[a._v("参数解析说明：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("-t: 在新容器内指定一个(伪)终端")])]),a._v(" "),s("li",[s("p",[a._v("-i: 允许对容器内的标准输入 ("),s("code",[a._v("STDIN")]),a._v(") 进行交互")])]),a._v(" "),s("li",[s("p",[a._v("-d: 让容器在后台运行")])]),a._v(" "),s("li",[s("p",[a._v("-P: 将容器内部使用的网络端口映射到当前主机上")])]),a._v(" "),s("li",[s("p",[a._v("-p: 设置不一样端口")])]),a._v(" "),s("li",[s("p",[a._v("容器当前运行命令")])])]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看当前运行的容器")]),a._v("\ndocker "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 等同于")]),a._v("\ndocker container "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看所有容器，包括停止的")]),a._v("\ndocker "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" -a\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 等同于")]),a._v("\ndocker container "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" -a\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看最新创建的容器，只列出最后创建的")]),a._v("\ndocker "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" -l\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看网络端口")]),a._v("\ndocker port "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container ID "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" container name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看容器内部的标准输出")]),a._v("\ndocker logs "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container ID "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" container name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看容器内部运行的进程")]),a._v("\ndocker "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("top")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container ID "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" container name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看 Docker 的底层信息。它会返回一个 JSON 文件记录着 Docker 容器的配置和状态信息")]),a._v("\ndocker inspect "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container ID "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" container name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("ul",[s("li",[a._v("停止容器运行")])]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("docker stop "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container ID "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" container name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 等同于")]),a._v("\ndocker container stop "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container ID "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" container name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("向容器里面的主进程发出 SIGTERM 信号，然后过一段时间再发出 SIGKILL 信号。")]),a._v(" "),s("ul",[s("li",[a._v("启动/重启容器")])]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 启动已停止的容器")]),a._v("\ndocker start "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container ID "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" container name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 重启正在运行的容器")]),a._v("\ndocker restart "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container ID "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" container name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("ul",[s("li",[a._v("终止容器运行")])]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("docker "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("kill")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container ID "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" container name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 等同于")]),a._v("\ndocker container "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("kill")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container ID "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" container name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("直接向容器里面的主进程发出 SIGKILL 信号")]),a._v(" "),s("ul",[s("li",[a._v("查看容器输出")])]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("docker logs "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container ID "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" container name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 等同于")]),a._v("\ndocker container logs "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container ID "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" container name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("查看 docker 容器的输出，即容器里面 Shell 的标准输出。")]),a._v(" "),s("ul",[s("li",[a._v("运行容器命令")])]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("docker "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" -it "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container ID "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" container name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" /bin/bash\n")])])]),s("p",[a._v("用于进入一个正在运行的 docker 容器，在容器的 Shell 执行命令")]),a._v(" "),s("ul",[s("li",[a._v("删除容器")])]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除容器，删除容器时，容器必须是停止状态")]),a._v("\ndocker "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container ID "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" container name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除所有容器,要删除容器，需要先停止容器运行")]),a._v("\ndocker stop "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("docker "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" -aq"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\ndocker "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("docker "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" -aq"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n")])])]),s("ul",[s("li",[a._v("删除镜像")])]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("docker image "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("image name "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" image id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 等同于")]),a._v("\ndocker rmi "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("image name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" image id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除untagged images，就是那些id为<None>的image")]),a._v("\ndocker rmi "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),a._v("docker images "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"^<none>"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("awk")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"{print '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$3")]),a._v('}"')]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除全部镜像")]),a._v("\ndocker rmi "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${docker images -q}")]),a._v("\n")])])]),s("ul",[s("li",[a._v("拷贝容器文件")])]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("docker "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("cp")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container ID "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|")]),a._v(" container name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("/path/to/file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n")])])]),s("p",[a._v("从正在运行的 Docker 容器里面，将文件拷贝到本机当前目录")]),a._v(" "),s("h2",{attrs:{id:"参考链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[a._v("#")]),a._v(" 参考链接")]),a._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Docker 入门教程"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://segmentfault.com/a/1190000017151019",target:"_blank",rel:"noopener noreferrer"}},[a._v("Docker 安装及使用"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);